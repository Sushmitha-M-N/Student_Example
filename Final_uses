Using final to Prevent Overriding

While method overriding is one of Javaâ€™s most powerful features, there will
be times when you will want to prevent it from occurring. To disallow a
method from being overridden, specify final as a modifier at the start of its
declaration. Methods declared as final cannot be overridden.
class A {
final void meth() {
System.out.println("This is a final method.");
}
}
class B extends A {
void meth() { // ERROR! Can't override.
System.out.println("Illegal!");
}
}



Using final to Prevent Inheritance

Sometimes you will want to prevent a class from being inherited. To do
this, precede the class declaration with final. Declaring a class as final
implicitly declares all of its methods as final, too.
it is illegal to declare a class as both abstract and final since an abstract
class is incomplete by itself and relies upon its subclasses to provide
complete implementations.
final class A {
//...
}
// The following class is illegal.
class B extends A { // ERROR! Can't subclass A
//...
}
