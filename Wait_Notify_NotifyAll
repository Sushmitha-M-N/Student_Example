Interthread Communication
The preceding examples unconditionally blocked other threads from
asynchronous access to certain methods. This use of the implicit monitors in
Java objects is powerful, but you can achieve a more subtle level of control
through interprocess communication. As you will see, this is especially easy
in Java.
As discussed earlier, multithreading replaces event loop programming by
dividing your tasks into discrete, logical units. Threads also provide a
secondary benefit: they do away with polling. Polling is usually implemented
by a loop that is used to check some condition repeatedly. Once the
condition is true, appropriate action is taken. This wastes CPU time. For
example, consider the classic queuing problem, where one thread is
producing some data and another is consuming it. To make the problem
more interesting, suppose that the producer has to wait until the consumer
is finished before it generates more data. In a polling system, the consumer
would waste many CPU cycles while it waited for the producer to produce.
Once the producer was finished, it would start polling, wasting more CPU
cycles waiting for the consumer to finish, and so on. Clearly, this situation is
undesirable.



To avoid polling, Java includes an elegant interprocess communication mechanism via
the wait( ), notify( ), and notifyAll( ) methods. These methods are implemented as final
methods in Object, so all classes have them. All three methods can be called only from
within a synchronized context. Although conceptually advanced from a computer
science perspective, the rules for using these methods are actually quite simple:
• wait( ) tells the calling thread to give up the monitor and go to sleep until some
other thread enters the same monitor and calls notify( ) or notifyAll( ).
• notify( ) wakes up a thread that called wait( ) on the same object.
• notifyAll( ) wakes up all the threads that called wait( ) on the same object. One of
the threads will be granted access.

These methods are declared within Object, as shown here:
final void wait( ) throws InterruptedException
final void notify( )
final void notify All( )


class Q {
int n;
boolean valueSet = false;
synchronized int get() {
while(!valueSet)
try {
wait();
} catch(InterruptedException e) {
System.out.println("InterruptedException caught");
}
System.out.println("Got: " + n);
valueSet = false;
notify();
return n;
}
synchronized void put(int n) {
while(valueSet)
try {
wait();
} catch(InterruptedException e) {
System.out.println("InterruptedException caught");
}
this.n = n;
valueSet = true;
System.out.println("Put: " + n);
notify();
}
}


class Producer implements Runnable
{
Q q;
Producer(Q q) {
this.q = q;
new Thread(this, "Producer").start(); 
}
public void run() {
int
i = 0;
while(true) {
q.put(i++);
}
}
}


class Consumer implements Runnable
{
Q q;
Consumer(Q q) {
this.q = q;
new Thread(this, "Consumer").start(); }
public void run() {
while(true) {
q.get(); 
}
}
}


class PCFixed
{
public static void main(String args[]) {
Q q = new Q();
new Producer(q);
new Consumer(q);
System.out.println("Press Control -C to stop.");
}
}



Put: 1
Got: 1
Put: 2
Got: 2
Put: 3
Got: 3
Put: 4
Got: 4
Put: 5
Got: 5
